一、运算符重载

1.<<与>>只能通过友元函数来重载；=，（），[]和->只能通过成员函数来重载。
友元函数：
  重载<<格式：friend ostream& operator<<(ostream &out, 类名 &类对象)；
成员函数：
  重载=格式：Name& operator=（Name &obj）;
  重载（）格式：int operator() (int a, int b);
  重载[]格式：int& operator[]（int i）;
  重载==（!=）格式：bool operator==（const char *p）const;
                    bool operatpr== (const 类名 &类对象)const;
  重载>（<）格式：int operator<(const char *p);
                  Int operator<(const 类名 &类对象);

2.前置++/--，格式：类名& operator++（）//成员函数实现重载
                   类名& operator++（类名 &类对象）//全局函数实现重载
  后置++/--， 格式：类名 operator++ （int）//成员函数实现重载
                   类名 operator++ （类名 &类对象， int）//全局函数实现重载
C++用一个占位符来区分前置与后置。

3.友元函数没有this指针。

4.为什么不要重载&&和||运算符？可以进行运算符重载，只是无法实现短路规则。
我们可以知道，如果进行&&操作符，若a1与a1+a2都为真，才会输出cout<<"有一个是假，则不在执行下一个表达式的计算"<<endl;先判断a1，再判断a1+a2，若a1为假，则不会判断a1+a2的真假，这一过程称为短路规则


二、继承和派生

1. public继承：   父类成员在子类中保持原有访问级别
   private继承：  父类成员在子类中变为private成员
   protected继承：父类中public成员会变成protected
			      父类中protected成员仍然为protected
			      父类中private成员仍然为private
   private成员在子类中依然存在，但是却无法访问到。不论种方式继承基类，派生类都不能直接使用基类的私有成员 。

2. 子类对象可以当作父类对象使用
   子类对象可以直接赋值给父类对象
   子类对象可以直接初始化父类对象
   父类指针可以直接指向子类对象
   父类引用可以直接引用子类对象
  在替代之后，派生类对象就可以作为基类的对象使用，但是只能使用从基类继承的成员。类型兼容规则是多态性的重要基础之一。

3.继承与组合混搭情况下，先调用直接父类的构造函数，如果直接父类还有父类，则先调用其父类构造函数，再调用直接父类的构造函数；然后调用组合类的构造函数，按照初始化列表中的顺序调用，随后调用自己。析构时，先调用的后析构，后调用的先析构。

4.继承中的同名成员变量和成员函数通过作用域分辨符进行区分。
当程序中子类与父类有同名成员变量和成员函数时，若不加作用域进行区分，则调用与改动的是子类的成员变量和成员函数。

5.类中的static关键字要在类外进行定义；且static关键字也遵守3个访问原则。

6.类的静态成员函数为什么不能调用非静态成员变量（属性）？
	类的静态成员（变量和方法）属于类本身，在类加载的时候就会分配内存，可以通过类名直接去访问；非静态成员（变量和方法）属于类的对象，所以只有在类的对象产生（创建类的实例）时才会分配内存，然后通过类的对象（实例）去访问。
在一个类的静态成员中去访问非静态成员之所以会出错是因为在类的非静态成员不存在的时候类的静态成员就已经存在了，访问一个内存中不存在的东西当然会出错。

7.多继承中的同名成员会出现二义性，解决方法：派生类对象访问时使用域名加以识别；虚继承。

8.虚继承：
如果一个派生类从多个基类派生，而这些基类又有一个共同的基类，则在对该基类中声明的名字进行访问时，可能产生二义性
如果在多条继承路径上有一个公共的基类，那么在继承路径的某处汇合点，这个公共基类就会在派生类的对象中产生多个基类子对象
要使这个公共基类在派生类中只产生一个子对象，必须对这个基类声明为虚继承，使这个基类成为虚基类。
虚继承声明使用关键字：	    virtual
例如：
		class B 
		{
		public: 
			int b;
		};
		class B1:virtual public B
		{
		private:
			int b1;
		};
		class B2:virtual public B
		{
		private:
			int b2;
		};
		class C:public B1, public B2
		{
		private:
			float d;
		};

三、多态

1.在继承中，子类父类有同名函数，我们希望根据实际的对象类型来判断重写函数的调用：
	如果父类指针指向的是父类对象则调用父类中定义的函数
	如果父类指针指向的是子类对象则调用子类中定义的重写函数
 为了解决由于编译器静态联编无法满足我们需求，我们通过virtual关键字（虚函数）对多态进行支持。

2.多态成立的3个条件：
(1) 要有继承；
(2) 要有函数重写（虚函数）；
(3) 要有父类指针（父类引用）指向子类对象。
多态是设计模式的基础，多态是框架的基础 

3.静态连编：程序的匹配、链接在编译阶段实现。重载函数是静态连编。
  动态联编：程序连编在运行时才进行。switch和if语句就是动态连编的例子。

4.对于多态的理解
(1) 多态的实现效果
	  多态：同样的调用语句有多种不同的表现形态；同样一个函数在不同的子类父类穿梭的时候表现出不同的形态。
(2) 多态实现的三个条件 
	有继承、有virtual重写、有父类指针（引用）指向子类对象。
(3) 多态的C++实现
   virtual关键字，告诉编译器这个函数要支持多态；不是根据指针类型判断如何调用；而
是要根据指针所指向的实际对象类型来判断如何调用
(4) 多态的理论基础 
   动态联编（在运行时才确定调用的是哪个对象的函数）PK静态联编（在编译时就已确定哪个对象的函数）。根据实际的对象类型来判断重写函数的调用。
(5) 多态的重要意义 
   设计模式的基础 是框架的基石。
(6) 实现多态的理论基础 
	函数指针做函数参数
	C函数指针是C++至高无上的荣耀。C函数指针一般有两种用法（正、反）。
(7) 多态原理探究
	是C++编译器提前布局的一个vptr指针，通过VPTR指针找到虚函数表（virtual成员函数会被编译器放入虚函数表中），然后找到函数的入口地址，来动态地进行迟邦定。
	虚函数表是一个存储类成员函数指针的数据结构。

5.重载和重写的异同之处
函数重载：
	必须在同一个类中进行
	子类无法重载父类的函数，父类同名函数将被名称覆盖
	重载是在编译期间根据参数类型和个数决定函数调用
函数重写：
	必须发生于父类与子类之间
	并且父类与子类中的函数必须有完全相同的原型
	使用virtual声明之后能够产生多态(如果不使用virtual，那叫重定义)

6.是否可将类的每个成员函数都声明为虚函数，为什么？
	可以，但是会影响效率，不建议这样做。
	通过虚函数表指针VPTR调用重写函数是在程序运行时进行的，因此需要通过寻址操作才能确定真正应该调用的函数，而普通成员函数是在编译时就确定了调用的函数。在效率上，虚函数的效率要低很多。

7.为什么要定义虚析构函数？
（1） 构造函数不能是虚函数。建立一个派生类对象时，必须从类层次的根开始，沿着继承路径逐个调用基类的构造函数。
（2） 析构函数可以是虚的。虚析构函数用于指引 delete 运算符正确析构动态对象

四、纯虚函数和抽象类

1.纯虚函数是一个在基类中说明的虚函数，在基类中没有定义，要求任何派生类都要定义自己的版本。具有纯虚函数的基类称为抽象类。

2.抽象类不能被实例化。例如有一个Figure类，则Figure f；//err

3.int a[10]; //a代表的是数组首元素的地址。&a代表整个数组的地址，&a+1 步长是40。

4.函数类型语法回调函数实现多态
	C语言通过typedef为函数类型重命名：
		int a[10];
	定义一个数组类型：
		typedef int (myTypeArray)[10];
		myTypeArray myArray;
		myArray[0]=10;
	定义一个指针数组类型：
		typedef int (*PTypeArray)[10];
		PTypeArray myPArray;
		myPArray=&a;
		(*myPArray)[0]=20;
	定义一个指向数组类型的指针，数组类的指针
		int (*MyPointer)[10];
		MyPointer=&a;
		(*MyPointer)[0]=40
	函数指针
		int add(int a, int b)
		{
		printf(“func add……\n”);
		return a + b;
		}
	定义一个函数类型：
		Typedef int (MyFuncType)(int a, int b); //定义了一个类型
		MyFuncType *myPointerFunc = NULL; //定义了一个指针，指向某一种类的函数
		myPointerFunc  =  &add;
		myPointerFunc (3, 4);
	定义一个函数指针类型
		typedef int (*MyPointerFuncType)(int a, int b);
		MyPointerFuncType myPointerFunc; //定义一个指针
		myPointerFunc = add;
		myPointerFunc (5, 6);
	函数指针
		Int ( *MyPointerFunc ) (int a, int b);
		MyPointerFunc  = add;
		MyPointerFunc (7, 8);
