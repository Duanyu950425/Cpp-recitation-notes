# **C++高级** #

## 一、函数模版和类模板（泛型编程） ##

### 1.函数模版与普通函数在一起时： ###

	函数模板可以像普通函数一样被重载
	C++编译器优先考虑普通函数，普通函数可以进行隐式的类型转换
	如果函数模板可以产生一个更好的匹配，那么选择模板
	可以通过空模板实参列表的语法限定编译器只通过模板匹配
	函数模版的应用比较局限，不能进行隐式的类型转换

### 2.函数模版的本质： ###
	编译器并不是把函数模版处理成能够处理任意类的函数；
	编译器从函数模版通过具体类产生不同的函数；
	编译器会对函数模版进行两次编译；
	在声明的地方对模版代码本身进行编译；在调用的地方对参数替换后的代码进行编译。

### 3.重载<<和>>只能用友元函数，其他运算符重载都要写成成员函数，不要滥用友元函数。 ###

### 4. ###
	![](https://i.imgur.com/DQO8VaO.png)
	
### 5. ###
	所有的类模板函数写在类的内部，没有什么大问题。
	所有的类模板写在类的外部，但在一个.cpp文件中。
友元函数：

1）需要在类前增加类的前置声明 函数的前置声明
	
	template<typename T>
	class Complex;  
	template<typename T>
	Complex<T> mySub(Complex<T> &c1, Complex<T> &c2); //友元函数但是并非重载运算符函数，则要增加函数的前置声明

2）类的内部声明：
	
	friend ostream& operator<< <T> (ostream &out, Complex<T> &c3) ;
	friend Complex<T> mySub <T> (Complex<T> &c1, Complex<T> &c2);

3）友元函数实现：//滥用友元函数

		//1.
	 	template<typename T>
    	Complex<T> mySub(Complex<T> &c1, Complex<T> &c2)
    	{
    				Complex<T> tmp(c1.a - c2.a, c1.b-c2.b);
    				return tmp;
    	}

		//2.
		template <typename T>
    	ostream & operator<<(ostream &out, Complex<T> &c3)
    	{
    				out <<  c3.a << " + " << c3.b <<  "i" << endl;
    				return out;
    	}
4)友元函数调用
	   
	    Complex<int> c4 = mySub<int>(c1, c2);
    	cout<<c4;
所有的类模板写在类的外部，在不同的.h和.cpp文件中
滥用的友元函数在此时报错。

### 6.类模板中的static关键字： ###

1) 从类模板实例化的每个模板类有自己的类模板数据成员，该模板类的所有对象共享一个static数据成员
2) 和非模板类的static数据成员一样，模板类的static数据成员也应该在文件范围定义和初始化
	
	Template <typename T>
	T 类名<T>：：静态数据成员 = 0;// 在类外对静态数据成员进行初始化。
3) 每个模板类有自己的类模板的static数据成员副本

## 二、C++的类型转换 ##
	static_cast		    静态类型转换。如int转换成char
	reinterpreter_cast 	重新解释类型 
	dynamic_cast		    动态类型转换。如子类和父类之间的多态类型转换。
	const_cast		    字面上理解就是去const属性。

4种类型转换的格式：
	TYPE B = static_cast<TYPE> (a)  

## 三、异常处理机制 ##
1.异常机制的捕捉方式基于类型匹配。

2.栈解旋（unwinding）：异常被抛出后，从进入try块起，到异常被抛掷前，这期间在栈上的构造的所有对象，都会被自动析构。

四、设计模式
------
三大类型：

创建型模式 :  通常和对象的创建有关，涉及到对象实例化的方式。（共5种模式)

结构型模式： 描述的是如何组合类和对象以获得更大的结构。(共7种模式)

行为型模式： 用来对类或对象怎样交互和怎样分配职责进行描述。(共11种模式)

桥梁（Bridge）模式的用意是将抽象化（Abstraction）与实现化（Implementation）脱耦，使得二者可以独立地变化。

观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题帮助。这个帮助的对象在状态上发生变化时，会通过所有观察者对象，使他们能够自动更新自己。
	